/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const TeamsLazyImport = createFileRoute('/teams')()
const PlayersLazyImport = createFileRoute('/players')()
const LeaguesLazyImport = createFileRoute('/leagues')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TeamsLazyRoute = TeamsLazyImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/teams.lazy').then((d) => d.Route))

const PlayersLazyRoute = PlayersLazyImport.update({
  id: '/players',
  path: '/players',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/players.lazy').then((d) => d.Route))

const LeaguesLazyRoute = LeaguesLazyImport.update({
  id: '/leagues',
  path: '/leagues',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/leagues.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/leagues': {
      id: '/leagues'
      path: '/leagues'
      fullPath: '/leagues'
      preLoaderRoute: typeof LeaguesLazyImport
      parentRoute: typeof rootRoute
    }
    '/players': {
      id: '/players'
      path: '/players'
      fullPath: '/players'
      preLoaderRoute: typeof PlayersLazyImport
      parentRoute: typeof rootRoute
    }
    '/teams': {
      id: '/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof TeamsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/leagues': typeof LeaguesLazyRoute
  '/players': typeof PlayersLazyRoute
  '/teams': typeof TeamsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/leagues': typeof LeaguesLazyRoute
  '/players': typeof PlayersLazyRoute
  '/teams': typeof TeamsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/leagues': typeof LeaguesLazyRoute
  '/players': typeof PlayersLazyRoute
  '/teams': typeof TeamsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/leagues' | '/players' | '/teams'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/leagues' | '/players' | '/teams'
  id: '__root__' | '/' | '/leagues' | '/players' | '/teams'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LeaguesLazyRoute: typeof LeaguesLazyRoute
  PlayersLazyRoute: typeof PlayersLazyRoute
  TeamsLazyRoute: typeof TeamsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LeaguesLazyRoute: LeaguesLazyRoute,
  PlayersLazyRoute: PlayersLazyRoute,
  TeamsLazyRoute: TeamsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/leagues",
        "/players",
        "/teams"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/leagues": {
      "filePath": "leagues.lazy.tsx"
    },
    "/players": {
      "filePath": "players.lazy.tsx"
    },
    "/teams": {
      "filePath": "teams.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
